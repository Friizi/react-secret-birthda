{"ast":null,"code":"var _jsxFileName = \"/Users/friizi/Documents/Project/node/secret-birthday/react/src/components/RankingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// RankingContext.js\n\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// Créez un contexte pour les classements\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RankingContext = /*#__PURE__*/createContext();\nexport const useRanking = () => {\n  _s();\n  return useContext(RankingContext);\n};\n\n// Composant RankingProvider\n_s(useRanking, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const RankingProvider = ({\n  children\n}) => {\n  _s2();\n  const [rankings, setRankings] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fonction pour rafraîchir les classements\n  const refreshRankings = async () => {\n    try {\n      // Simulez une requête à une API pour obtenir les données de classement\n      const response = await fetchRankingsFromAPI();\n      setRankings(response.data);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Erreur lors du rafraîchissement des classements :\", error);\n    }\n  };\n\n  // Chargement initial des données lorsque le composant est monté\n  useEffect(() => {\n    refreshRankings();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(RankingContext.Provider, {\n    value: {\n      rankings,\n      loading,\n      refreshRankings\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n// Fonction fictive pour simuler une requête à une API\n_s2(RankingProvider, \"5cpUAF/ddFtVy/nlDoorgGo89/E=\");\n_c = RankingProvider;\nconst fetchRankingsFromAPI = () => {\n  // Simulez une réponse de l'API\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: [{\n          nom: \"Participant 1\",\n          cagnotte: 1000\n        }, {\n          nom: \"Participant 2\",\n          cagnotte: 2000\n        }, {\n          nom: \"Participant 3\",\n          cagnotte: 3000\n        }]\n      });\n    }, 1000);\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"RankingProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","RankingContext","useRanking","_s","RankingProvider","children","_s2","rankings","setRankings","loading","setLoading","refreshRankings","response","fetchRankingsFromAPI","data","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","Promise","resolve","setTimeout","nom","cagnotte","$RefreshReg$"],"sources":["/Users/friizi/Documents/Project/node/secret-birthday/react/src/components/RankingContext.js"],"sourcesContent":["// RankingContext.js\n\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// Créez un contexte pour les classements\nconst RankingContext = createContext();\n\nexport const useRanking = () => {\n  return useContext(RankingContext);\n};\n\n// Composant RankingProvider\nexport const RankingProvider = ({ children }) => {\n  const [rankings, setRankings] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fonction pour rafraîchir les classements\n  const refreshRankings = async () => {\n    try {\n      // Simulez une requête à une API pour obtenir les données de classement\n      const response = await fetchRankingsFromAPI();\n      setRankings(response.data);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Erreur lors du rafraîchissement des classements :\", error);\n    }\n  };\n\n  // Chargement initial des données lorsque le composant est monté\n  useEffect(() => {\n    refreshRankings();\n  }, []);\n\n  return (\n    <RankingContext.Provider value={{ rankings, loading, refreshRankings }}>\n      {children}\n    </RankingContext.Provider>\n  );\n};\n\n// Fonction fictive pour simuler une requête à une API\nconst fetchRankingsFromAPI = () => {\n  // Simulez une réponse de l'API\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        data: [\n          { nom: \"Participant 1\", cagnotte: 1000 },\n          { nom: \"Participant 2\", cagnotte: 2000 },\n          { nom: \"Participant 3\", cagnotte: 3000 },\n        ],\n      });\n    }, 1000);\n  });\n};\n"],"mappings":";;;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,gBAAGN,aAAa,CAAC,CAAC;AAEtC,OAAO,MAAMO,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,OAAOP,UAAU,CAACK,cAAc,CAAC;AACnC,CAAC;;AAED;AAAAE,EAAA,CAJaD,UAAU;AAKvB,OAAO,MAAME,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC/C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMc,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,oBAAoB,CAAC,CAAC;MAC7CL,WAAW,CAACI,QAAQ,CAACE,IAAI,CAAC;MAC1BJ,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;IAC3E;EACF,CAAC;;EAED;EACAjB,SAAS,CAAC,MAAM;IACda,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA,CAACC,cAAc,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEX,QAAQ;MAAEE,OAAO;MAAEE;IAAgB,CAAE;IAAAN,QAAA,EACpEA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;;AAED;AAAAhB,GAAA,CA5BaF,eAAe;AAAAmB,EAAA,GAAfnB,eAAe;AA6B5B,MAAMS,oBAAoB,GAAGA,CAAA,KAAM;EACjC;EACA,OAAO,IAAIW,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC;QACNX,IAAI,EAAE,CACJ;UAAEa,GAAG,EAAE,eAAe;UAAEC,QAAQ,EAAE;QAAK,CAAC,EACxC;UAAED,GAAG,EAAE,eAAe;UAAEC,QAAQ,EAAE;QAAK,CAAC,EACxC;UAAED,GAAG,EAAE,eAAe;UAAEC,QAAQ,EAAE;QAAK,CAAC;MAE5C,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;AACJ,CAAC;AAAC,IAAAL,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}